"""Shared model definitions for the server and client."""

from enum import Enum
from typing import List, Dict
from uuid import UUID

from pydantic import BaseModel, Field, validator

class JobSpec(BaseModel):
    """Specification of a job submitted by users."""

    seed: int = 1
    default_batch_size: int = 1024
    min_batch_size: int = 8
    max_batch_size: int = 4096
    eta_knob: float = 0.5
    beta_knob: float = 2.0
    target_metric: float = 0.50
    max_epochs: int = 100
    num_recurrences: int = 100
    max_retries: int = 20

    # TODO: Add a validator (check job_id is None)


class JobPhase(str, Enum):
    """Status of a job."""

    Running = "running"
    Completed = "completed"


class JobInfo(BaseModel):
    """Complete information of a job.
    
    Args:
        job_id: A UUID that uniquely identifies the training job
            generated by ZeusServer.
        user_id: A string that uniquely identifies the user who
            has submitted the job.
        spec: Specification of the job, submitted by users.
        phase: Current phase of the job.
    """
    
    job_id: UUID
    user_id: str
    spec: JobSpec
    phase: JobPhase


class TrialResult(BaseModel):
    """Results of a completed trial."""

    batch_size: int
    time: float
    energy: float
    cost: float
    num_epochs: int
    reached: bool


class TrialPhase(str, Enum):
    """Status of a trial."""

    Running = "running"
    Completed = "completed"


class TrialInfo(BaseModel):
    """Complete information of a trial."""

    job_id: UUID
    rec_i: int = Field(gt=0)
    trial_i: int = Field(gt=0)
    result: TrialResult
    phase: TrialPhase

class TrialInfoList(BaseModel):
    
    info_list: List[TrialInfo]

class TrainingPhase(str, Enum):
    """Phase of training: Train or Eval."""

    Train = "train"
    Eval = "eval"


class ProfilingValueType(str, Enum):
    """Type of profiling result values."""

    Power = "power"
    Throughput = "tput"


class ProfilingRecord(BaseModel):
    """One profiling record."""
    
    phase: TrainingPhase
    power_limit: int
    value_type: ProfilingValueType
    value: float


class ProfilingResult(BaseModel):
    """Profiling results for a job.
    
    Args:
        records: List of profiling records. This contains avg_power and throughput
            values for a given job and bacth size.
        rec_i: Iterator that marks which recurrence the profiling result comes from.
        trial_i: Iterator that marks which trial the profiling result comes from.
    """

    records: List[ProfilingRecord]
    rec_i: int = Field(gt=0)
    trial_i: int = Field(gt=0)


class ProfilingInfo(BaseModel):
    """Complete profiling information of a job."""

    job_id: UUID
    results: Dict[int, ProfilingResult]
